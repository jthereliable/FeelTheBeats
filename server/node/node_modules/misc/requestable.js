var __					= require("underscore"),
	mysql				= require("database/mysql"),
	mongo				= require("database/mongo"),
	squel				= require("squel"),
	async				= require("async");

var collection = {};
var model = {};

var field_split = /[\;\,]\s{0,1}/g;

collection.get = function(req, from, where, fields, limit, callback) {
	var keys = __.keys(fields);
	var allowed = __.union(
		((req.query || {}).fields || "").split(field_split),
		((req.body || {}).fields || "").split(field_split)
	);
	var ignore = __.union(
		((req.query || {}).ignore || "").split(field_split),
		((req.body || {}).ignore || "").split(field_split)
	);
	var params = __.extend(
		__.pick(req.query || {}, keys),
		__.pick(req.body || {}, keys),
		__.pick(req.params || {}, keys)
	);
	var order = req.query.order;
	var sort = req.query.sort;
	var offset = req.query.offset|0 || 0;
	var limit = req.query.limit|0 || limit;
	
	if(order)
	{
		if(!__.has(fields, order) || fields[order].sort==null)
		{
			order = null;
		}
	}
	if(!order)
	{
		for(order in fields)
		{
			if(fields[order].default_order)
			{
				break;
			}
		}
	}
	sort = sort || fields[order].sort;
	sort = (sort == -1 || String(sort).toUpperCase() == "DESC")?false:true;
	
	var sql = squel.select()
					.from(
						mysql.escapeId(from)
					).order(
						mysql.escapeId(fields[order].name || from+"."+order),
						sort
					).offset(offset)
					.limit(limit);
	
	var i, l = keys.length, j, jl, t;
	var k, f, s, fn, joined=[];
	for(i=0;i<l;i++)
	{
		k = keys[i];
		f = fields[k];
		if((f.ignore && allowed.indexOf(k) == -1) || ignore.indexOf(k) != -1 || (k.indexOf(".")>-1 && ignore.indexOf(k.split(".",1)[0]) != -1) || f.collection)
		{
			continue;
		}
		
		if(f.tables)
		{
			jl = f.tables.length;
			for(j=0;j<jl;j++)
			{
				t = f.tables[j];
				if(!joined[t.table])
				{
					sql.left_join(
						mysql.escapeId(t.table),
						null,
						mysql.escapeId(t.on[0]) + " = " + mysql.escapeId(t.on[1])
					);
					joined[t.table] = true;
				}
			}
		}
		fn = mysql.escapeId(f.name || from+"."+k);
		sql.field(fn, k);
		
		if(f.queryable && __.has(params, k))
		{
			if(f.string)
			{
				sql.where(fn + " LIKE " + mysql.escape(params[k] + "%"));
			} else {
				sql.where(fn + " = " + mysql.escape(params[k]));
			}
		}
	}
	for(i in where)
	{
		sql.where(mysql.escapeId((i.indexOf(".")==-1)?from+"."+i:i) + " = " + mysql.escape(where[i]));
	}
	
	sql = sql.toString();
	mysql.query(sql, function(err, rows) {
		// Handle errors here?
		callback(err, rows);
	});
};
model.get = function(req, from, where, fields, callback) {
	var keys = __.keys(fields);
	var allowed = __.union(
		((req.query || {}).fields || "").split(field_split),
		((req.body || {}).fields || "").split(field_split)
	);
	var ignore = __.union(
		((req.query || {}).ignore || "").split(field_split),
		((req.body || {}).ignore || "").split(field_split)
	);
	
	var sql = squel.select().from(mysql.escapeId(from));
	var nosql = {};
	
	var i, l = keys.length, j, jl, t;
	var k, f, s, fn, joined=[];
	for(i=0;i<l;i++)
	{
		k = keys[i];
		f = fields[k];
		if((f.ignore && allowed.indexOf(k) == -1) || ignore.indexOf(k) != -1 || (k.indexOf(".")>-1 && ignore.indexOf(k.split(".",1)[0]) != -1))
		{
			continue;
		}
		if(f.collection)
		{
			if(!nosql[f.collection])
			{
				nosql[f.collection] = [];
			}
			nosql[f.collection].push({
				"key": k,
				"name": (f.name || k)
			});
			continue;
		}
		
		if(f.tables)
		{
			jl = f.tables.length;
			for(j=0;j<jl;j++)
			{
				t = f.tables[j];
				if(!joined[t.table])
				{
					sql.left_join(
						mysql.escapeId(t.table),
						null,
						mysql.escapeId(t.on[0]) + " = " + mysql.escapeId(t.on[1])
					);
					joined[t.table] = true;
				}
			}
		}
		fn = mysql.escapeId(f.name || from+"."+k);
		sql.field(fn, k);
	}
	
	for(i in where)
	{
		sql.where(mysql.escapeId((i.indexOf(".")==-1)?from+"."+i:i) + " = " + mysql.escape(where[i]));
	}
	sql = sql.toString();
	
	var out;
	async.series([
		function(next) {
			mysql.query(sql, function(err, rows) {
				if(err)
				{
					callback(err, null);
					return;
				}
				if(rows.length == 0)
				{
					callback(null, {});
					return;
				}
				out = rows[0];
				next();
			});
		},
		function(next) {
			var i, l, f, doc;
			
			async.eachSeries(__.keys(nosql), function(collection, next) {
				mongo.collection(collection).find(where, function(err, docs) {
					if(err)
					{
						next(err);
						return;
					}
					if(docs.length == 0)
					{
						next();
						return;
					}
					doc = docs[0];
					f = nosql[collection];
					l = f.length;
					for(i=0;i<l;i++)
					{
						out[f[i].key] = doc[f[i].name];
					}
					next();
				});
			}, function(err) {
				if(err)
				{
					callback(err, null);
					return;
				}
				next();
			});
		},
		function(next) {
			callback(null, out);
		}
	]);
};

exports.collection = collection;
exports.model = model;