var __					= require("underscore"),
	mysql				= require("database/mysql.js");

var select = {};
var update = {};

select.fields = function(req, fields) {
	var allowed = select.fields.allowed(req, fields);
	var keys = __.difference(
		__.keys(fields),
		select.fields.ignore(req, fields)
	);
	
	var out = [];
	var i, l=keys.length, k, f, o;
	for(i=0;i<l;i++)
	{
		k = keys[i];
		f = fields[k];
		if((f.ignore && allowed.indexOf(k) == -1) || f.mongo)
		{
			continue;
		}
		o = mysql.escapeId(f.name || k) + " AS "+mysql.escapeAlias(f.as || k);
		
		out.push(o);
	}
	return " " + out.join(", ") + " ";
};
select.fields.mongo = function(req, fields) {
	var allowed = select.fields.allowed(req, fields);
	var keys = __.difference(
		__.keys(fields),
		select.fields.ignore(req, fields)
	);
	
	var out = {};
	var i, l=keys.length, k, f, o;
	for(i=0;i<l;i++)
	{
		k = keys[i];
		f = fields[k];
		if((f.ignore && allowed.indexOf(k) == -1) || !f.mongo)
		{
			continue;
		}
		out[k] = true;
	}
	return out;
};
select.fields.allowed = function(req, fields) {
	return __.union(
		((req.query || {}).fields || "").split(select.fields.split),
		((req.body || {}).fields || "").split(select.fields.split)
	);
};
select.fields.ignore = function(req, fields) {
	return __.union(
		((req.query || {}).ignore || "").split(select.fields.split),
		((req.body || {}).ignore || "").split(select.fields.split)
	);
};
select.fields.split = /[\;\,]\s{0,1}/g;

select.where = function(req, query) {
	var keys = __.keys(query);
	var params = __.extend(__.pick(req.query || {}, keys), __.pick(req.body || {}, keys), __.pick(req.params || {}, keys));
	if(__.isEmpty(params))
	{
		return " WHERE 1 ";
	}
	
	var out = [];
	var i, f, v;
	for(i in params)
	{
		f = query[i].name || i;
		if(query[i].string)
		{
			out.push(mysql.escapeId(f) + " LIKE " + mysql.escape(params[i]+"%"));
		} else {
			out.push(mysql.escapeId(f) + " = " + mysql.escape(params[i]));
		}
	}
	return " WHERE " + out.join(" AND ") + " ";
};
select.order = function(req, orderable, limit) {
	limit = limit || 25;
	
	var order = req.query.order;
	var sort = req.query.sort;
	var offset = req.query.offset|0 || 0;
	var limit = req.query.limit|0 || limit;
	
	if(order)
	{
		if(!__.has(orderable, order))
		{
			order = null;
		}
	}
	if(!order)
	{
		for(order in orderable)
		{
			if(orderable[order].def)
			{
				break;
			}
		}
	}
	
	if(!sort)
	{
		sort = orderable[order].sort;
	}
	if(sort == -1 || String(sort).toUpperCase() == "DESC")
	{
		sort = "DESC";
	} else {
		sort = "ASC";
	}
	
	order = orderable[order].name || order;
	
	return " ORDER BY " + mysql.escapeId(order) + " " + sort + " LIMIT " + offset + ", " + limit + " ";
};

exports.select = select;
exports.update = update;