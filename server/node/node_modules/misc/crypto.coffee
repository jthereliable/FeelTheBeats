require "coffee-script"

crypto = require "crypto"
string = require "misc/string"

# Base Conversion
exports.hexToBase64 = (data) ->
  new Buffer(data, "hex").toString("base64")
exports.base64ToHex = (data) ->
  new Buffer(data, "base64").toString("hex")

# Hash
exports.hash = (data, algo="sha256", encoding="hex") ->
  h = crypto.createHash algo
  h.update(data, "utf8")
  h.digest(encoding)

exports.sha1 = (data) ->
  exports.hash data, "sha1"
exports.md5 = (data) ->
  exports.hash data, "md5"
exports.sha256 = (data) ->
  exports.hash data, "sha256"
exports.sha512 = (data) ->
  exports.hash data, "sha512"

# MAC
exports.mac = (data, key, algo="sha256") ->
  m = crypto.createHmac algo, key
  m.update data
  m.digest("base64")

exports.mac_sha1 = (data, key) ->
  exports.mac data, key, "sha1"
exports.mac_md5 = (data, key) ->
  exports.mac data, key, "md5"
exports.mac_sha256 = (data, key) ->
  exports.mac data, key, "sha256"
exports.mac_sha512 = (data, key) ->
  exports.mac data, key, "sha512"

# Cipher
CIPHER_SALT_BLOCK_COUNT = 12
exports.encrypt = (data, key, algo="aes256") ->
  s = string.random CIPHER_SALT_BLOCK_COUNT*3
  c = crypto.createCipher algo, key+s
  u = c.update data, "utf8", "hex"
  Buffer(s, "utf8").toString("base64") + exports.hexToBase64(u + c.final("hex"))

exports.decrypt = (data, key, algo="aes256") ->
  try
    s = Buffer(data.substring(0, CIPHER_SALT_BLOCK_COUNT*4), "base64").toString("utf8")
    data = data.substring(CIPHER_SALT_BLOCK_COUNT*4)
    d = crypto.createDecipher algo, key+s
    u = d.update exports.base64ToHex(data), "hex", "utf8"
    u + d.final("utf8")
  catch e
    null

exports.aes128 = (data, key) ->
  exports.encrypt data, key, "AES-128-CFB"
exports.aes192 = (data, key) ->
  exports.encrypt data, key, "AES-192-CFB"
exports.aes256 = (data, key) ->
  exports.encrypt data, key, "AES-256-CFB"
exports.rc4 = (data, key) ->
  exports.encrypt data, key, "RC4-40"
exports.blowfish = (data, key) ->
  exports.encrypt data, key, "BF-CBC"

exports.aes128_d = (data, key) ->
  exports.decrypt data, key, "AES-128-CFB"
exports.aes192_d = (data, key) ->
  exports.decrypt data, key, "AES-192-CFB"
exports.aes256_d = (data, key) ->
  exports.decrypt data, key, "AES-256-CFB"
exports.rc4_d = (data, key) ->
  exports.decrypt data, key, "RC4-40"
exports.blowfish_d = (data, key) ->
  exports.decrypt data, key, "BF-CBC"

# Auth
AUTH_ENCRYPT_MAC_SIZE = 256
AUTH_ENCRYPT_MAC_BASE64_SIZE = Math.ceil AUTH_ENCRYPT_MAC_SIZE/8*4/3
exports.auth_encrypt = (data, key, algo="aes256", mac_algo="sha256") ->
  enc = exports.encrypt data, exports.md5(key+"enc"), algo
  mac = exports.mac data, exports.md5(key+"mac"), mac_algo
  mac.substring(0, AUTH_ENCRYPT_MAC_BASE64_SIZE) + enc
exports.auth_decrypt = (data, key, algo="aes256", mac_algo="sha256") ->
  mac = data.substring 0, AUTH_ENCRYPT_MAC_BASE64_SIZE
  data = data.substring AUTH_ENCRYPT_MAC_BASE64_SIZE
  dec = exports.decrypt data, exports.md5(key+"enc"), algo
  _mac = exports.mac dec, exports.md5(key+"mac"), mac_algo
  if mac == _mac.substring(0, AUTH_ENCRYPT_MAC_BASE64_SIZE) then dec else null

exports.auth_aes128 = (data, key) ->
  exports.auth_encrypt data, key, "AES-128-CFB"
exports.auth_aes192 = (data, key) ->
  exports.auth_encrypt data, key, "AES-192-CFB"
exports.auth_aes256 = (data, key) ->
  exports.auth_encrypt data, key, "AES-256-CFB"
exports.auth_rc4 = (data, key) ->
  exports.auth_encrypt data, key, "RC4-40"
exports.auth_blowfish = (data, key) ->
  exports.auth_encrypt data, key, "BF-CBC"

exports.auth_aes128_d = (data, key) ->
  exports.auth_decrypt data, key, "AES-128-CFB"
exports.auth_aes192_d = (data, key) ->
  exports.auth_decrypt data, key, "AES-192-CFB"
exports.auth_aes256_d = (data, key) ->
  exports.auth_decrypt data, key, "AES-256-CFB"
exports.auth_rc4_d = (data, key) ->
  exports.auth_decrypt data, key, "RC4-40"
exports.auth_blowfish_d = (data, key) ->
  exports.auth_decrypt data, key, "BF-CBC"

# Password Function
exports.password = (pass, salt, callback, iters=2048, keylen=64) ->
  if callback?
    crypto.pbkdf2 pass, salt, iters, keylen, (err, dkey) ->
      if err?
        callback? err, null
        return
      callback? null, dkey
  else
    crypto.pbkdf2Sync(pass, salt, iters, keylen).toString("base64")