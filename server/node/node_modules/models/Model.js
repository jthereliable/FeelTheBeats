var flat = require("flat");
require("prototypes");

var Model = function(fields, restrict) {
	fields = fields || {};
	restrict = restrict || {};
	
	var model = this.constructor.model, that = this, value, d, depth;
	Object.keys(model).forEach(function(key) {
		if(restrict[key] != null && restrict[key] != 1)
		{
			return;
		}
		if(fields[key] != null)
		{
			value = fields[key];
		} else {
			value = model[key].default;
			if(value == null)
			{
				return;
			}
		}
		if(key.indexOf(".")==-1)
		{
			that[key] = value;
		} else {
			key = key.split(".");
			depth = key.length;
			
			for(d=0;d<depth-1;d++)
			{
				if(that[key[d]] == null)
				{
					that[key[d]] = {};
				}
				that = that[key[d]];
			}
			if(that[key[d]] == null)
			{
				that[key[d]] = value;
			}
		}
	});
};
Model.model = {};
Model.validate = function(obj) {
	var attr, field, value;
	var d, depth;
	for(attr in obj.constructor.model)
	{
		field = obj.constructor.model[attr];
		if(field.type == null)
		{
			continue;
		}
		
		attr = attr.split(".");
		depth = attr.length;
		
		value = obj;
		for(d=0;d<depth;d++)
		{
			value = value[attr[d]];
			if(value == null)
			{
				break;
			}
		}
		if(value != null)
		{
			if(!field.type(value))
			{
				return false;
			}
		} else if(field.required)
		{
			return false;
		}
	}
	return true;
};
Model.fromObject = function(fields, restrict) {
	fields = fields || {};
	restrict = restrict || {};
	return new Object(fields, restrict);
};
Model.fromObjects = function(arr, restrict) {
	restrict = restrict || {};
	var out = [], i, l = arr.length;
	for(i=0;i<l;i++)
	{
		if(arr[i] instanceof Object)
		{
			out[i] = Model.fromObject(arr[i], restrict);
		}
	}
	return out;
};
Model.fromFlattenedObject = function(fields, restrict) {
	fields = flat.unflatten(fields) || {};
	return Model.fromobject(fields, restrict);
};
Model.fromFlattenedObjects = function(arr, restrict) {
	restrict = restrict || {};
	var out = [], i, l = arr.length;
	for(i=0;i<l;i++)
	{
		if(arr[i] instanceof Object)
		{
			out[i] = Model.fromObject(flat.unflatten(fields), restrict);
		}
	}
	return out;
};
Model.toFlattenedObject = function(obj) {
	return flat.flatten(obj);
};
Model.toFieldObject = Model.toFlattenedObject;
Model.toFieldString = function(obj) {
	var flattened = flat.flatten(obj);
	var out = "";
	Object.keys(obj).forEach(function(key) {
		switch(typeof(obj[key]))
		{
			case "string":
			case "number":
			case "boolean":
				out = (out==""?"":"&") + key+"="+obj[key];
				break;
		}
	});
	return out;
};
module.exports = exports = Model;