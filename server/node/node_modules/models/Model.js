var flat = require("flat");
require("prototypes");

var Model = function() {
	var attr, def, value;
	var d, depth;
	for(attr in this.constructor.model)
	{
		def = this.constructor.model[attr].default;
		if(def == null)
		{
			continue;
		}
		
		attr = attr.split(".");
		depth = attr.length;
		
		value = this;
		for(d=0;d<depth-1;d++)
		{
			if(value[attr[d]] == null)
			{
				value[attr[d]] = {};
			}
			value = value[attr[d]];
		}
		if(value[attr[d]] == null)
		{
			value[attr[d]] = def;
		}
	}
};
Model.model = {};
Model.validate = function(obj) {
	var attr, field, value;
	var d, depth;
	for(attr in obj.constructor.model)
	{
		field = obj.constructor.model[attr];
		if(field.type == null)
		{
			continue;
		}
		
		attr = attr.split(".");
		depth = attr.length;
		
		value = obj;
		for(d=0;d<depth;d++)
		{
			value = value[attr[d]];
			if(value == null)
			{
				break;
			}
		}
		if(value != null)
		{
			if(!field.type(value))
			{
				return false;
			}
		} else if(field.required)
		{
			return false;
		}
	}
	return true;
};
Model.prototype.validate = function() {
	return this.constructor.validate(this);
};
Model.fromObject = function() {
	
};
Model.toFlattenedObject = function() {
	
};
Model.toFieldObject = Model.toFlattenedObject;
Model.toFieldString = function() {
	
};
module.exports = exports = Model;