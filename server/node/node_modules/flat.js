var flatten_helper = function(out, obj, parent_key) {
	if(!(obj instanceof Object))
	{
		out[parent_key] = obj;
		return out;
	}
	
	var isArray = (obj instanceof Array);
	Object.keys(obj).forEach(function(key) {
		flatten_helper(out, obj[key], (isArray?(parent_key+"["+key+"]"):(parent_key==""?key:(parent_key+"."+key))));
	});
	return out;
};
var flatten = module.exports.flatten = exports.flatten = function(obj) {
	return flatten_helper({}, obj, "");
};

var unflatten_key_sorter = function(key1, key2) {
	if(key1 == key2)
	{
		return 0;
	}
	var i, l=Math.min(key1.length, key2.length);
	var c1, c2, n1, n2;
	for(i=0;i<l;i++)
	{
		c1 = key1[i];
		c2 = key2[i];
		if(c1 == c2)
		{
			continue;
		}
		n1 = isNaN(c1%1);
		n2 = isNaN(c2%1);
		return (n1==n2)?((c1>c2)?1:-1):(n1?1:-1);
	}
	if(key1.length == l)
	{
		return -1;
	}
	return 1;
};
var unflatten = module.exports.unflatten = exports.unflatten = function(obj) {
	var out = null;
	var keys = Object.keys(obj), i, l=keys.length;
	keys.sort(unflatten_key_sorter);
	
	var key, value, keyParts, keyPart, j, jl, isArray;
	var temp1, temp2, temp3;
	
	var splitRegex = /[\.\[]/g, arrayRegex = /\]$/, quotedStringRegex = /^('.*')|(".*")$/;
	
	for(i=0;i<l;i++)
	{
		key = keys[i];
		value = obj[key];
		if(value instanceof Object)
		{
			value = unflatten(value);
		}
		
		temp1 = out;
		keyParts = key.split(splitRegex);
		jl = keyParts.length;
		for(j=0;j<jl;j++)
		{
			keyPart = keyParts[j];
			if(keyPart=="")
			{
				keyParts.shift();
				j--;
				jl--;
				continue;
			}
			
			isArray = arrayRegex.test(keyPart);
			if(isArray)
			{
				keyPart = keyPart.slice(0,-1);
				if(quotedStringRegex.test(keyPart))
				{
					isArray = false;
					keyPart = keyPart.slice(1).slice(0,-2);
					if(keyPart%1==0)
					{
						keyPart = keyParts[j].slice(0,-1);
					}
				} else if(isNaN(keyPart%1))
				{
					isArray = false;
				}
			}
			if(temp1 == null)
			{
				if(j==0)
				{
					temp1 = out = isArray?[]:{};
				} else {
					temp1 = temp2[temp3] = isArray?[]:{};
				}
			}
			if(j == jl-1)
			{
				temp1[keyPart] = value;
				continue;
			}
			temp2 = temp1;
			temp3 = keyPart;
			temp1 = temp2[temp3];
		}
	}
	
	return out;
};