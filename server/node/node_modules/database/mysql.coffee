require "coffee-script"

mysql = require "mysql"
settings = require "settings.json"

options = settings.database.mysql
pool = mysql.createPool {
  host:               options.host
  port:               options.port
  user:               options.user
  password:           options.password
  database:           options.database
  connectionLimit:    options.pool_size
  multipleStatements: true # for transactions
}

exports = module.exports = do () ->
  # TODO: Update code using new node-mysql pooling

  that = {}

  that.destroy = () ->
    pool.end (err) ->
      if err
        pool.destroy()
    that = null

  that.acquire = (callback) ->
    retry = (attempt) ->
      if attempt++ >= 10
        callback? null
        return
      pool.getConnection (err, connection) ->
        if err || !connection?
          if connection
            connection.destroy()
          setTimeout () ->
            retry attempt
          , 50
          return
        callback? connection
    retry 0

  that.release = (connection) ->
    connection.end()

  that.escape = (s) ->
    return mysql.escape s
  that.escapeId = (s) ->
    return mysql.escapeId s
  that.escapeAlias = (s) ->
    return mysql.escapeId s, true
  that.escapeArray = (a) ->
    mysql.escape elem for elem in a
  that.escapeIdArray = (a) ->
    mysql.escapeId id for id in a

  questionMarks = []
  that.questionMarks = (n) ->
    l = questionMarks.length
    for l in [l..n] by 1
      questionMarks.push "?"
    return questionMarks.slice(0,n).join(", ")

  questionMarksId = []
  that.questionMarksId = (n) ->
    l = questionMarksId.length
    for l in [l..n] by 1
      questionMarksId.push "??"
    return questionMarksId.slice(0,n).join(", ")

  that.query = (query, args, callback) ->
    if typeof(args) == "function"
      callback = args
      args = []
    if !(args instanceof Array)
      args = []
    that.acquire (connection) ->
      if !connection
        that.release connection
        callback? "Could not acquire MySQL connection", null
        return
      q = connection.query query, args, (err,rows) ->
        that.release connection
        if err
          err.sql = q.sql
          callback? err, null
          return
        callback? null, rows

  that.transaction = () ->
    out = {}
    queries = []
    out.query = (query, args) ->
      if !(args instanceof Array)
        args = []
      queries.push {
        query
        args
      }
      out
    out.rollback = () ->
      that.acquire (connection) ->
        if !connection
          that.release connection
          return
        connection.query "ROLLBACK;", (err, result) ->
          that.release connection
    out.commit = (callback) ->
      that.acquire (connection) ->
        if !connection
          that.release connection
          callback? "Could not acquire MySQL connection", null
          return
        queries.unshift {
          query: "START TRANSACTION;"
          args: []
        }
        queries.push {
          query: "COMMIT;"
          args: []
        }

        runQueries = () ->
          query = queries.shift()
          connection.query query.query, query.args, (err, result) ->
            if err
              that.release connection
              out.rollback()
              callback? err, null
              return
            if queries.length <= 0
              that.release connection
              callback null, result
              return
            runQueries()
        runQueries()
    out

  that