require "coffee-script"

flatten_helper = (out, obj, parent_key) ->
  if !(obj instanceof Object)
    out[parent_key] = obj
    return out

  isArray = (obj instanceof Array)
  for key, val of obj
    if obj.hasOwnProperty key
      flatten_helper out, val, if isArray then "#{parent_key}[#{key}]" else if parent_key == "" then key else "#{parent_key}.#{key}"

  out

flatten = module.exports.flatten = exports.flatten = (obj) ->
  flatten_helper {}, obj, ""

unflatten_key_sorter = (key1, key2) ->
  if key1 == key2
    return 0

  l = Math.min key1.length, key2.length
  for i in [0..l] by 1
    c1 = key1[i]
    c2 = key2[i]
    if c1 == c2
      continue

    n1 = isNaN c1%1
    n2 = isNaN c2%1
    return if n1==n2 then (if c1>c2 then 1 else -1) else (if n1 then 1 else -1)

  if key1.length == 1
    return -1

  return 1

splitRegex = /[\.\[]/g
arrayRegex = /\]$/
quotedStringRegex = /^('.*')|(".*")$/
unflatten = module.exports.unflatten = exports.unflatten = (obj) ->
  out = {}
  keys = Object.keys obj
  keys.sort unflatten_key_sorter

  for key in keys
    value = obj[key]
    if value instanceof Object
      value = unflatten value

    temp1 = out
    keyParts = key.split splitRegex
    j = 0
    jl = keyParts.length
    while j < jl
      keyPart = keyParts[j]
      if keyPart == ""
        keyParts.shift()
        --jl
        continue

      isArray = arrayRegex.test keyPart
      if isArray
        keyPart = keyPart.slice 0, -1
        if quotedStringRegex.test keyPart
          isArray = false
          keyPart = keyPart.slice(1).slice(0,-2)
          if keyPart%1 == 0
            keyPart = keyParts[j].slice(0,-1)
        else if isNaN keyPart%1
          isArray = false

      if !temp1?
        if j == 0
          temp1 = out = if isArray then [] else {}
        else
          temp1 = temp2[temp3] = if isArray then [] else {}
      if j == jl-1
        temp1[keyPart] = value
        ++j
        continue

      temp2 = temp1
      temp3 = keyPart
      temp1 = temp2[temp3]

      ++j

  out