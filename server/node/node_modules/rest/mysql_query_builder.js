var mysql	= require("database/mysql.js"),
	__		= require("underscore");

var select_group_where_reduce = function(where, value, field) {
	if(!field || !this.model[field])
	{
		return where;
	}
	var type = this.model[field].type;
	if(field && type(value))
	{
		switch(type.type) {
			case "number":
			case "int":
				if(!isNaN(value))
				{
					where.push(mysql.escapeId(field)+" = "+mysql.escape(value));
				}
				break;
			case "enumerable":
				// TODO: cache enumerable where push etc
				break;
			case "string":
				where.push(mysql.escapeId(field)+" LIKE "+mysql.escape(value+"%"));
				break;
			default:
				where.push(mysql.escapeId(field)+" = "+mysql.escape(value));
				break;
		}
	}
	return where;
};
exports.select_group_request = function(model, table, field_settings, limit, query) {
	var fields = {
		"requestable": field_settings.requestable,
		"default": field_settings.request_default,
		"show": (query.fields && query.fields.length>0)?query.fields.split(","):[],
		"ignore": (query.ignore && query.ignore.length>0)?query.ignore.split(","):[]
	};
	var where = __.pick(query, field_settings.where);
	var order = __.indexOf(query.order, field_settings.order)>-1?query.order:"uid";
	var sort = (query.sort && (query.sort=="true" || String(query.sort).toUpperCase()))=="DESC"?"DESC":"ASC";
	var offset = Math.max(0, query.offset || 0);
	limit = Math.max(1, Math.min(Number(limit) || 50, Number(query.limit) || 50));
	
	fields = __.intersection(__.difference(__.union(fields.default, fields.show), fields.ignore), fields.requestable);
	var i, l=fields.length;
	for(i=0;i<l;i++)
	{
		if(fields[i])
		{
			fields[i] = mysql.escapeId(fields[i]);
		}
	}
	fields = fields.join(", ");
	
	where = __.reduce(where, select_group_where_reduce, [], model);
	if(where.length == 0)
	{
		where = "1";
	} else {
		where = where.join(" AND ");
	}
	
	table = mysql.escapeId(table);
	order = mysql.escapeId(order);
	
	return "SELECT "+fields+" FROM "+table+" WHERE "+where+" ORDER BY "+order+" "+sort+" LIMIT "+offset+","+limit;
};