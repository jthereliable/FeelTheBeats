var mysql	= require("database/mysql.js"),
	__		= require("underscore");

var select_rows_where_reduce = function(where, value, field) {
	if(!field || !this.model[field])
	{
		return where;
	}
	var type = this.model[field].type;
	if(field && type(value))
	{
		switch(type.type) {
			case "number":
			case "int":
				if(!isNaN(value))
				{
					where.push(mysql.escapeId(field)+" = "+mysql.escape(value));
				}
				break;
			case "enumerable":
				// TODO: cache enumerable where push etc
				break;
			case "string":
				where.push(mysql.escapeId(field)+" LIKE "+mysql.escape(value+"%"));
				break;
			default:
				where.push(mysql.escapeId(field)+" = "+mysql.escape(value));
				break;
		}
	}
	return where;
};
exports.select_rows_request = function(model, table, field_settings, limit, query, callback) {
	var fields_requestable = field_settings.requestable;
	var fields_default = field_settings.request_default;
	var fields_show = (query.fields && query.fields.length>0)?query.fields.split(","):[];
	var fields_ignore = (query.ignore && query.ignore.length>0)?query.ignore.split(","):[];
	
	var where = __.pick(query, field_settings.where);
	var order = __.indexOf(query.order, field_settings.order)>-1?query.order:field_settings.order[0];
	var sort = (query.sort && (query.sort=="true" || String(query.sort).toUpperCase()))=="DESC"?"DESC":"ASC";
	var offset = Math.max(0, query.offset || 0);
	limit = Math.max(1, Math.min(Number(limit) || 50, Number(query.limit) || 50));
	
	fields = __.intersection(__.difference(__.union(fields_default, fields_show), fields_ignore), fields_requestable);
	var i, l=fields.length, temp=[];
	for(i=0;i<l;i++)
	{
		if(fields[i])
		{
			temp.push(mysql.escapeId(fields[i]));
		}
	}
	fields = temp.join(", ");
	
	where = __.reduce(where, select_rows_where_reduce, [], model);
	if(where.length == 0)
	{
		where = "1";
	} else {
		where = where.join(" AND ");
	}
	
	table = mysql.escapeId(table);
	order = mysql.escapeId(order);
	
	var query = "SELECT "+fields+" FROM "+table+" WHERE "+where+" ORDER BY "+order+" "+sort+" LIMIT "+offset+","+limit;
	mysql.query(query, callback);
};

exports.select_row_request = function(model, table, field_settings, params, query, callback) {
	var fields_requestable = field_settings.requestable;
	var fields_default = field_settings.request_default;
	var fields_show = (query.fields && query.fields.length>0)?query.fields.split(","):[];
	var fields_ignore = (query.ignore && query.ignore.length>0)?query.ignore.split(","):[];
	var fields_mongo = Object.keys(field_settings.mongo);
	var fields_joins = Object.keys(field_settings.join_field);
	
	fields = __.intersection(__.difference(__.union(fields_default, fields_show), fields_ignore, fields_mongo), fields_requestable);
	fields_joins = __.intersection(fields, fields_joins);
	fields = __.difference(fields, fields_joins);
	var i, l=fields.length, temp=[];
	for(i=0;i<l;i++)
	{
		if(fields[i])
		{
			temp.push(mysql.escapeId(table+"."+fields[i]) + " AS "+mysql.escapeAlias(fields[i]));
		}
	}
	
	var join_field = field_settings.join_field;
	var joins = [], j,jl, k,kl;
	var j_tables, j_table, j_key, j_fields;
	l=fields_joins.length;
	for(i=0;i<l;i++)
	{
		j_key = fields_joins[i];
		j_tables = join_field[j_key];
		if(!(j_tables instanceof Array))
		{
			j_tables = [j_tables];
		}
		jl = j_tables.length;
		for(j=0;j<jl;j++)
		{
			j_table = j_tables[j];
			j_fields = j_table.fields;
			
			kl = j_fields.length;
			for(k=0;k<kl;k++)
			{
				temp.push(mysql.escapeId(j_table.table+"."+j_fields[k]) + " AS "+mysql.escapeAlias(j_key+"."+j_fields[k]));
			}
			joins.push("LEFT JOIN "+mysql.escapeId(j_table.table)+" ON("+mysql.escapeId(j_table.on[0]) + "=" + mysql.escapeId(j_table.on[1])+")");
		}
	}
	fields = temp.join(", ");
	joins = joins.join(" ");
	
	var where = mysql.escapeId(table+"."+field_settings.where_field) + " = " + mysql.escape(params[field_settings.where_field]);
	
	var query = "SELECT "+fields+" FROM "+table+" "+joins+" WHERE "+where+" LIMIT 0,1";
	mysql.query(query, callback);
};